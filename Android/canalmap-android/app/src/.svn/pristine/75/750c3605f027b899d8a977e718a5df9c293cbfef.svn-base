package com.tyctak.cancamapp._archive;

import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.tyctak.cancamapp.BuildConfig;
import com.tyctak.cancamapp.Global;
import com.tyctak.cancamapp.Library_DB;
import com.tyctak.cancamapp.Library_FS;
import com.tyctak.cancamapp.Library_GG;
import com.tyctak.cancamapp.Library_UI;
import com.tyctak.cancamapp.R;

import static android.view.View.GONE;

public class Activity_AboutUs2 extends AppCompatActivity {

    private String TAG = "Activity_AboutUs";

    private Activity_AboutUs2 activityAboutUs = this;
    private Library_GG LIBGG;

    private class keyboardMenu {
        public String HIDE = "Hide";
        public String SHOW = "Show";
    }

    private keyboardMenu km = new keyboardMenu();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_aboutus);

        Toolbar myToolbar = (Toolbar) findViewById(R.id.toolbar_keyboard);
        setSupportActionBar(myToolbar);

        TextView version = (TextView) findViewById(R.id.aboutus_version);

        try {
            PackageInfo packageInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
            String versionName = packageInfo.versionName;
            version.setText(getString(R.string.version) + " " + versionName + (BuildConfig.DEBUG ? "d" : ""));
        } catch (PackageManager.NameNotFoundException e) {
            version.setText("");
        }

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle(R.string.aboutUs);

        if (BuildConfig.DEBUG) {
            showButtons();
        } else {
            hideButtons();
        }

        LIBGG = new Library_GG(this);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.keyboardactionbar_aboutus, menu);
        MenuItem pause_button = menu.getItem(0);

        if (BuildConfig.DEBUG) {
            pause_button.setTitle(km.HIDE);
        } else {
            pause_button.setTitle(km.SHOW);
        }

        return super.onCreateOptionsMenu(menu);
    }

    public void DisplayKeyboard(MenuItem item) {
        if (item.getTitle().equals(km.SHOW)) {
            showButtons();
            item.setTitle(km.HIDE);
            item.setIcon(R.drawable.ic_keyboard_hide);
        } else {
            hideButtons();
            item.setTitle(km.SHOW);
            item.setIcon(R.drawable.ic_keyboard_show);
        }
    }

    private void hideButtons() {
        LinearLayout aboutus_buttons = (LinearLayout) findViewById(R.id.aboutus_buttons);
        aboutus_buttons.setVisibility(GONE);
    }

    private void showButtons() {
        LinearLayout aboutus_buttons = (LinearLayout) findViewById(R.id.aboutus_buttons);
        aboutus_buttons.setVisibility(View.VISIBLE);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == android.R.id.home) {
            onBackPressed(); return true;
        }

        return super.onOptionsItemSelected(item);
    }

    public void initialiseCache(View view) {
        Library_UI LIBUI = new Library_UI();
        LIBUI.confirmationDialogYesNo(getString(R.string.confirm_initialisecache_title), getString(R.string.confirm_initialisecache), new Runnable() {
            @Override
            public void run() {
                initialiseCache();
            }
        }, this);
    }

    public void initialiseCache() {
        Log.d(TAG, "Initialise Cache");

        FrameLayout progress = (FrameLayout) findViewById(R.id.progressWaitingFullScreenAboutUs);
        progress.setVisibility(View.VISIBLE);

        Thread worker = new Thread(new Runnable() {
            @Override
            public void run() {
                getLIBDB().initialiseCache();

                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        FrameLayout progress = (FrameLayout) findViewById(R.id.progressWaitingFullScreenAboutUs);
                        progress.setVisibility(GONE);

                        Library_UI LIBUI = new Library_UI();
                        LIBUI.popupExitDialog(getString(R.string.restart_application_title), getString(R.string.restart_application_initialisecache), activityAboutUs);
                    }
                });
            }
        });

        worker.start();
    }

    //Todo: Need to think about how to copy a db back to the mobile app without corrupting
    //it, maybe mark it to copy and then copy during startup.
//    public void copyFromSDCard(View view) {
//        Log.d(TAG, "Copy from SD Card");
//
//        FrameLayout progress = (FrameLayout) findViewById(R.id.progressWaitingFullScreenAboutUs);
//        progress.setVisibility(View.VISIBLE);
//
//        Thread worker = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                Library_FS LIBFS = new Library_FS(getApplicationContext());
//                if (!Global.DatOnSdCard) {
//                    getgetLIBDB().closeDb();
//                    LIBFS.copyFile(Library_FS.enmFolder.SdCardRoot, Library_FS.enmFolder.Data, Library_DB.DATABASE_NAME, null);
//                }
//
//                runOnUiThread(new Runnable() {
//                    @Override
//                    public void run() {
//                        FrameLayout progress = (FrameLayout) findViewById(R.id.progressWaitingFullScreenAboutUs);
//                        progress.setVisibility(View.GONE);
//
//                        Library_UI LIBUI = new Library_UI();
//                        if (BuildConfig.DEBUG) {
//                            LIBUI.snackBar(activityAboutUs, R.string.copy_sdcard_technical);
//                        } else if (Global.DatOnSdCard) {
//                            LIBUI.snackBar(activityAboutUs, R.string.already_on_sdcard);
//                        } else {
//                            LIBUI.snackBar(activityAboutUs, R.string.copy_sdcard);
//                        }
//                    }
//                });
//            }
//        });
//
//        worker.start();
//    }

    public void copyToSDCard(View view) {
        Log.d(TAG, "Copy to SD Card");

        FrameLayout progress = (FrameLayout) findViewById(R.id.progressWaitingFullScreenAboutUs);
        progress.setVisibility(View.VISIBLE);

        Thread worker = new Thread(new Runnable() {
            @Override
            public void run() {
                Library_FS LIBFS = new Library_FS(getApplicationContext());
                if (!Global.DatOnSdCard) {
                    getLIBDB().closeDb();
                    LIBFS.copyFile(Library_FS.enmFolder.Data, Library_FS.enmFolder.SdCardRoot, Library_DB.DATABASE_NAME, null);
                }

                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        FrameLayout progress = (FrameLayout) findViewById(R.id.progressWaitingFullScreenAboutUs);
                        progress.setVisibility(GONE);

                        Library_UI LIBUI = new Library_UI();
                        if (BuildConfig.DEBUG) {
                            LIBUI.snackBar(activityAboutUs, R.string.copy_sdcard_technical);
                        } else if (Global.DatOnSdCard) {
                            LIBUI.snackBar(activityAboutUs, R.string.unable_as_on_sdcard);
                        } else {
                            LIBUI.snackBar(activityAboutUs, R.string.copy_sdcard);
                        }
                    }
                });
            }
        });

        worker.start();
    }

    public void repairOwnership(View view) {
        Library_UI LIBUI = new Library_UI();
        LIBUI.confirmationDialogYesNo(getString(R.string.confirm_repairownership_title), getString(R.string.confirm_repairownership), new Runnable() {
            @Override
            public void run() {
                repairOwnership();
            }
        }, this);
    }

    private void repairOwnership() {
        Log.d(TAG, "Repair ownership");

        FrameLayout progress = (FrameLayout) findViewById(R.id.progressWaitingFullScreenAboutUs);
        progress.setVisibility(View.VISIBLE);

        Thread worker = new Thread(new Runnable() {
            @Override
            public void run() {
                int messageId = LIBGG.repairWaterwaysPurchased();

                class completePurchase implements Runnable {
                    private int value;
                    completePurchase(int pValue) { value = pValue; }
                    public void run() {
                        FrameLayout progress = (FrameLayout) findViewById(R.id.progressWaitingFullScreenAboutUs);
                        progress.setVisibility(GONE);

                        Library_UI LIBUI = new Library_UI();
                        LIBUI.snackBar(activityAboutUs, getString(value));
                    }
                };

                runOnUiThread(new completePurchase(messageId));
            }
        });

        worker.start();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (LIBGG != null) {
            LIBGG.endConnection();
        }
    }
}
