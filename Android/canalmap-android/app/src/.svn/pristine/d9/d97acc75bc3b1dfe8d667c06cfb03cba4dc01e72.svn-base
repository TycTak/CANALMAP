package com.tyctak.cancamapp;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Point;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.tyctak.cancamapp.entities._Waterway;

import org.osmdroid.util.GeoPoint;

import java.util.ArrayList;

public class Dialog_Action extends AppCompatActivity {

    private final String TAG = "Dialog_Action";
    private Integer DELAY = 1000;

    private Activity dialogActivity = this;
    Handler handlerCheckDetails;
    Runnable runnable;
    Boolean stillRunning = false;
    ArrayAdapter_SimpleWaterways arrayAdapter;
    ArrayList<_Waterway> waterways;
    int key = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.dialog_action);

        double[] gp = getIntent().getDoubleArrayExtra("GeoPoint");
        GeoPoint geoPoint = new GeoPoint(gp[0], gp[1]);

        Library_OS LIBOS = new Library_OS();
        int zoom = 17;
        Point point = LIBOS.getMapTileFromCoordinates(geoPoint.getLatitude(), geoPoint.getLongitude(), zoom);
        key = ((zoom << zoom) + point.x << zoom) + point.y;

        waterways = Global.getLIBDB().getListCrossCheckedWaterways(key);

        LinearLayout layoutMapFound = (LinearLayout) findViewById(R.id.layoutMapFound);
        LinearLayout layoutMapNotFound = (LinearLayout) findViewById(R.id.layoutMapNotFound);

        if (waterways.size() == 0) {
            layoutMapNotFound.setVisibility(View.VISIBLE);
        } else {
            layoutMapFound.setVisibility(View.VISIBLE);
            TextView textListWaterways = (TextView) findViewById(R.id.textListWaterways);
            if (waterways.size() == 1) {
                textListWaterways.setText("The following map covers this location...");
            } else {
                textListWaterways.setText("The following maps cover this location...");
            }

            ListView listView = (ListView) findViewById(R.id.listOfWaterways);
            arrayAdapter = new ArrayAdapter_SimpleWaterways(this, waterways);
            listView.setAdapter(arrayAdapter);

            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                    _Waterway waterway = (_Waterway) parent.getItemAtPosition(position);

                    Intent intent = new Intent(Dialog_Action.this, Dialog_Waterway.class);
                    intent.putExtra("waterwayGuid", waterway.WaterwayGuid);
                    intent.putExtra("purchased", waterway.Purchased);
                    intent.putExtra("nobuttons", true);
                    intent.putExtra("paused", waterway.Paused);

                    startActivity(intent);
                }
            });
        }
    }

    @Override
    public void onResume() {
        super.onResume();  // Always call the superclass method first

        if (arrayAdapter != null) {
            stillRunning = true;
            handlerCheckDetails = new Handler();
            runnable = new Runnable() {
                @Override
                public void run() {
                    ArrayList<_Waterway> wwList = Global.getLIBDB().getListCrossCheckedWaterways(key);

                    for (_Waterway waterway : waterways) {
                        int position = arrayAdapter.getPosition(waterway);
                        _Waterway ww = wwList.get(position);
                        waterway.TilesDownloaded = ww.TilesDownloaded;
                        waterway.Paused = ww.Paused;
                        waterway.TotalTiles = ww.TotalTiles;
                        waterway.Empty = ww.Empty;
                        waterway.CurrentVersion = ww.CurrentVersion;
                        waterway.MyVersion = ww.MyVersion;
                        waterway.Purchased = ww.Purchased;

                    }

                    arrayAdapter.notifyDataSetChanged();

                    if (stillRunning) handlerCheckDetails.postDelayed(this, DELAY);
                }
            };

            Log.d(TAG, "Create runnable");
            handlerCheckDetails.postDelayed(runnable, DELAY);
        }
    }

    public void clickSimpleWaterwayButton(final View view) {
        final String waterwayGuid = view.getTag().toString();

        Button update_button = (Button) view.findViewById(R.id.update_button_item_simple);
        update_button.setVisibility(View.GONE);

        final Library_UI LIBUI = new Library_UI();
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                if (!Global.getIsNetworkConnected()) {
                    refreshUI(new Runnable() {
                        @Override
                        public void run() {
                            LIBUI.snackBar(dialogActivity, R.string.msg_failed_network);
                        }
                    });
                    return;
                }

                Button update_button = (Button) view.findViewById(R.id.update_button_item_simple);
                update_button.setVisibility(View.GONE);

                new Thread(new Worker_DownloadTiles(waterwayGuid, new Worker_DownloadTiles.DownloadTilesListener() {
                    @Override
                    public void onSuccess() {
                        refreshUI(null);
                    }

                    @Override
                    public void onFailed() {
                        refreshUI(new Runnable() {
                            @Override
                            public void run() {
                                LIBUI.snackBar(dialogActivity, R.string.msg_failed_network);
                            }
                        });
                    }
                })).start();
            }
        };

        Runnable cancelRunnable = new Runnable() {
            @Override
            public void run() {
                refreshUI(null);
            }
        };

        arrayAdapter.setDialogWaterwayGuid(waterwayGuid);

        LIBUI.confirmationDialogYesNo(getString(R.string.confirm_downloadwaterway_title), getString(R.string.confirm_downloadwaterway), runnable, cancelRunnable, dialogActivity);
    }

    private void refreshUI(final Runnable runnable) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                arrayAdapter.setDialogWaterwayGuid("");
                arrayAdapter.notifyDataSetChanged();
                if (runnable != null) runnable.run();
            }
        });
    }

    public void clickSimpleBuyButton(View view) {
        final String waterwayGuid = view.getTag().toString();

        Library_GG LIBGG = new Library_GG(this);

        try {
            if (BuildConfig.DEBUG) {
                Global.getLIBDB().writeBuyWaterway(waterwayGuid);
                arrayAdapter.notifyDataSetChanged();
            } else if (LIBGG.isReady()) {
                Button buy_button = (Button) view.findViewById(R.id.buy_button_item_simple);
                buy_button.setVisibility(View.GONE);
                LIBGG.buyWaterway(arrayAdapter, waterwayGuid, this);
            } else {
                arrayAdapter.notifyDataSetChanged();
                Library_UI LIBUI = new Library_UI();
                LIBUI.snackBar(this, R.string.msg_failed_ready);
            }
        } catch (Exception e) {
            Log.d(TAG, "ERROR for general Exception when running writeBuyWaterway");
            e.printStackTrace();
        }
    }

    public void closeActivity(View view) {
        finish();
    }
}
