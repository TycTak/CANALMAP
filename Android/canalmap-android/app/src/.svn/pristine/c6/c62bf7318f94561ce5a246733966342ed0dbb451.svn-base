package com.tyctak.cancamapp._archive;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;

public class Library_FT {
    Session session;
    ChannelSftp channelSftp;

    private void disconnect() {
        if (channelSftp != null) {
            channelSftp.exit();
            session.disconnect();
        }
    }

    private void connect(String ftpServer, String ftpUser, String ftpPassword) {
        try {
            disconnect();

            JSch jsch = new JSch();
            session = jsch.getSession(ftpUser, ftpServer);
            session.setPassword(ftpPassword);

            java.util.Properties config = new java.util.Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);
            session.connect();

            Channel channel = session.openChannel("sftp");
            channel.connect();
            channelSftp = (ChannelSftp) channel;
        } catch (JSchException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public Boolean processCommands(String ftpServer, String ftpUser, String ftpPassword, ArrayList<_FtpCommand> ftpCommandList) {
        try {
            connect(ftpServer, ftpUser, ftpPassword);

            for (_FtpCommand command : ftpCommandList) {
                switch (command.Command) {
                    case SendFile:
                        sendFile(command.Args);
                        break;
                    case GetFile:
                        getFile(command.Args);
                        break;
                    case ChangeFolder:
                        changeFolder(command.Args);
                        break;
                }
            }

            disconnect();

            return true;
        } catch (SftpException e) {
            e.printStackTrace();
            System.exit(0);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.exit(0);
        }

        return false;
    }

    private boolean changeFolder(String... args) throws SftpException {
        String destinationPath = args[0];
        channelSftp.cd(destinationPath);

        return true;
    }

    private boolean sendFile(String... args) throws SftpException, FileNotFoundException {
        String fileSourcePath = args[0];

        File f1 = new File(fileSourcePath);
        channelSftp.put(new FileInputStream(f1), f1.getName());

        return true;
    }

    public boolean getFile(String... args) throws SftpException {
        String fileSourcePath = args[0];
        String fileDestinationPath = args[0];

        channelSftp.get(fileSourcePath, fileDestinationPath);

        return true;
    }
}
