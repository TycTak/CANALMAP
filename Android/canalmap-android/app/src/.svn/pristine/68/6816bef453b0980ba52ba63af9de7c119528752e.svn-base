package com.tyctak.cancamapp;

import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.os.Handler;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AlertDialog;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.tyctak.cancamapp.entities._Poi;

import org.apmem.tools.layouts.FlowLayout;

import java.util.ArrayList;

public class Library_UI {

    private final String TAG = "Library_UI";

    public String getVersion() {
        String retval;

        try {
            PackageInfo packageInfo = MyApp.getContext().getPackageManager().getPackageInfo(MyApp.getContext().getPackageName(), 0);
            String versionName = packageInfo.versionName;
            retval = MyApp.getContext().getString(R.string.version) + " " + versionName + (BuildConfig.DEBUG ? "d-" : "-") + Global.getLIBDB().getDBVersion();
        } catch (PackageManager.NameNotFoundException e) {
            retval = MyApp.getContext().getString(R.string.versionUnknown);
        }

        return retval;
    }

    /** Check if this device has a camera */
    private boolean checkCameraHardware(Context context) {
        if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)){
            // this device has a camera
            return true;
        } else {
            // no camera on this device
            return false;
        }
    }

    public void runSnackBarOnUIThread(final Activity parent, final Integer id) {
        Handler mainHandler = new Handler(parent.getMainLooper());
        Runnable myRunnable = new Runnable() {
            @Override
            public void run() {
                Library_UI LIBUI = new Library_UI();
                LIBUI.snackBar(parent, id);
                //R.string.msg_failed_network
            }
        };
        mainHandler.post(myRunnable);
    }

    public void snackBar(Activity parent, Integer id, Snackbar.Callback callback) {
        final ViewGroup viewGroup = (ViewGroup) ((ViewGroup) parent.findViewById(android.R.id.content)).getChildAt(0);
        Snackbar snackbar = Snackbar.make(viewGroup, id, Snackbar.LENGTH_LONG);
        snackbar.addCallback(callback);
        snackbar.show();
    }

    public void snackBarError(Activity parent, String message) {
        String errorText = parent.getString(R.string.msg_email_support);
        final ViewGroup viewGroup = (ViewGroup) ((ViewGroup) parent.findViewById(android.R.id.content)).getChildAt(0);
        Snackbar.make(viewGroup, errorText + ". " + message, Snackbar.LENGTH_LONG).show();
    }

    public void snackBar(Activity parent, Integer id) {
        final ViewGroup viewGroup = (ViewGroup) ((ViewGroup) parent.findViewById(android.R.id.content)).getChildAt(0);
        Snackbar.make(viewGroup, id, Snackbar.LENGTH_LONG).show();
    }

    public void addPois(final String area, final double[] points, final TextView markerText, final ImageView imageView, final int index, final int poiId, final Activity parent, ArrayList<_Poi> pois, FlowLayout flowLayout, boolean withText) {
        if (flowLayout == null) return;

        Library LIB = new Library();

        int imgWidth = LIB.ConvertToDensityPixels(parent, 40);
        int imgHeight = LIB.ConvertToDensityPixels(parent, 40);
        int txtWidth = LIB.ConvertToDensityPixels(parent, 110);
        int rightMargin = LIB.ConvertToDensityPixels(parent, 5);
        int leftMargin = LIB.ConvertToDensityPixels(parent, 12);
        int topMargin = LIB.ConvertToDensityPixels(parent, 15);

        Library_GR LIBGR = new Library_GR();

        for (final _Poi poi : pois) {
            LinearLayout ll = new LinearLayout(parent);
            ll.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            ll.setOrientation(LinearLayout.HORIZONTAL);
            ll.setPadding((!withText ? leftMargin : 0 ), topMargin, rightMargin, 0);

            ImageView imgV = LIBGR.getImage(parent, poi.Name, imgWidth, imgHeight, 0, 0, 0, 0, (!withText ? new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    int id = (int) parent.getResources().getIdentifier(poi.Name, "drawable", parent.getPackageName());
                    Library_GR LIBGR = new Library_GR();
                    Bitmap marker = LIBGR.getDrawableImage(parent, id, 384, 384);
                    if (marker != null) {
                        Bitmap image = null;
                        if (imageView != null) image = LIBGR.getBitmapFromImageView(imageView);

                        String text = markerText.getText().toString();

                        int rowId = (int)imageView.getTag();

                        rowId = Global.getLIBDB().writePoiLocation(rowId, area, poi.Name, points, 0, 0, Global.getLIBDB().getMyBoatGuid(), image, poi.Action, marker, text);

                        Intent intent = new Intent();
                        intent.putExtra("process", "write");
                        intent.putExtra("poiid", rowId);
                        intent.putExtra("index", index);
                        parent.setResult(Activity.RESULT_OK, intent);
                    }

                    parent.finish();
                }
            } : null));

            ll.addView(imgV);

            if (withText) {
                TextView txt = new TextView(parent);
                txt.setHeight(imgHeight);
                txt.setWidth(txtWidth);
                txt.setPadding(leftMargin, 0, 0, 0);
                txt.setGravity(Gravity.VERTICAL_GRAVITY_MASK);

                txt.setText(poi.Description);
                ll.addView(txt);
            }

            flowLayout.addView(ll);
        }

        flowLayout.invalidate();
    }

    public void snackBar(Activity parent, String message) {
        final ViewGroup viewGroup = (ViewGroup) ((ViewGroup) parent.findViewById(android.R.id.content)).getChildAt(0);
        Snackbar.make(viewGroup, message, Snackbar.LENGTH_LONG).show();
    }

    public void confirmationDialogYesNo(String title, String message, final Runnable method, final Activity target) {
        confirmationDialogYesNo(title, message, method, null, target);
//        AlertDialog.Builder builder = new AlertDialog.Builder(target);
//
//        builder.setTitle(title);
//        builder.setMessage(message).setCancelable(true).setPositiveButton("Yes", new DialogInterface.OnClickListener() {
//            @Override
//            public void onClick(DialogInterface dialog, int which) {
//                dialog.dismiss();
//                method.run();
//            }
//        }).setNegativeButton("No", );
//
//        AlertDialog alertDialog = builder.create();
//        alertDialog.show();
    }

    public void confirmationDialogYesNo(String title, String message, final Runnable yesMethod, final Runnable noMethod, final Activity target) {
        AlertDialog.Builder builder = new AlertDialog.Builder(target);

        builder.setTitle(title);
        builder.setMessage(message).setCancelable(false).setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                if (yesMethod != null) yesMethod.run();
            }
        }).setNegativeButton("No", new DialogInterface.OnClickListener() {
            @Override public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                if (noMethod != null) noMethod.run();
            }
        });

        AlertDialog alertDialog = builder.create();
        alertDialog.show();
    }

    public void confirmationDialogYesNoRepeat(String title, String message, final Runnable yesMethod, final Runnable noMethod, final Runnable dontAskMethod, final Activity target) {
        AlertDialog.Builder builder = new AlertDialog.Builder(target);

        builder.setTitle(title);
        builder.setMessage(message).setCancelable(false).setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                yesMethod.run();
            }
        }).setNegativeButton("No", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                noMethod.run();
            }
        }).setNeutralButton("Don't Ask", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                dontAskMethod.run();
            }
        });

        AlertDialog alertDialog = builder.create();
        alertDialog.show();
    }

    public String displayUpdateGpsText(Integer update) {
        String retval;

        switch (update) {
            case 0: retval = MyApp.getContext().getString(R.string.gpstext0); break;
            case 1: retval = MyApp.getContext().getString(R.string.gpstext1); break;
            case 2: retval = MyApp.getContext().getString(R.string.gpstext2); break;
            case 3: retval = MyApp.getContext().getString(R.string.gpstext3); break;
            case 4: retval = MyApp.getContext().getString(R.string.gpstext4); break;
            case 5: retval = MyApp.getContext().getString(R.string.gpstext5); break;
            case 6: retval = MyApp.getContext().getString(R.string.gpstext6); break;
            case 7: retval = MyApp.getContext().getString(R.string.gpstext7); break;
            case 8: retval = MyApp.getContext().getString(R.string.gpstext8); break;
            default: retval = MyApp.getContext().getString(R.string.gpstext); break;
        }

        return retval;
    }

    public void confirmationDialogSelectImage(final Runnable galleryMethod, final Runnable cameraMethod, final Activity target) {
        AlertDialog.Builder builder = new AlertDialog.Builder(target);

        builder.setTitle("Select Image");
        builder.setMessage("Do you want to select an image from your gallery or take a new one with the camera").setCancelable(false).setPositiveButton("Gallery", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                galleryMethod.run();
            }
        }).setNegativeButton("Camera", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                cameraMethod.run();
            }
        }).setNeutralButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });

        AlertDialog alertDialog = builder.create();
        alertDialog.show();
    }

    public void popupExitDialog(String title, String message, final Activity target) {
        AlertDialog.Builder builder = new AlertDialog.Builder(target);

        builder.setTitle(title);
        builder.setMessage(message).setNegativeButton("Ok", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                target.finishAffinity();
                System.exit(0);
            }
        }).setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialog) {
                target.finishAffinity();
                System.exit(0);
            }
        });

        AlertDialog alertDialog = builder.create();
        alertDialog.show();
    }
}
