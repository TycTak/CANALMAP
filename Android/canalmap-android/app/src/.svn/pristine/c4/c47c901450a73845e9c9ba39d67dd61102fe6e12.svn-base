package com.tyctak.cancamapp;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.media.ExifInterface;
import android.net.Uri;
import android.support.v7.widget.AppCompatDrawableManager;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;

import com.tyctak.cancamapp.entities._Boat;

import org.apmem.tools.layouts.FlowLayout;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

import static android.graphics.Bitmap.createBitmap;

public class Library_GR {

    private final String TAG = "Library_GR";
    private final int POI_WIDTH = 300;

    public byte[] getByteArrayFromImageView(ImageView imageView)
    {
        Bitmap bitmap = getBitmapFromImageView(imageView);
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);

        return stream.toByteArray();
    }

    public Bitmap getBitmapFromImageView(ImageView imageView)
    {
        BitmapDrawable bitmapDrawable = ((BitmapDrawable)imageView.getDrawable());
        Bitmap bitmap;

        if(bitmapDrawable == null){
            imageView.buildDrawingCache();
            bitmap = imageView.getDrawingCache();
            imageView.buildDrawingCache(false);
        }else
        {
            bitmap = bitmapDrawable.getBitmap();
        }

        return bitmap;
    }

    public ArrayList<ImageView> getImages(Activity parent, ArrayList<String> imageNames, Integer width, Integer height, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, View.OnClickListener onClick) {
        ArrayList<ImageView> retval = new ArrayList<ImageView>();

        for (String item : imageNames) {
            retval.add(getImage(parent, item, width, height, leftMargin, rightMargin, topMargin, bottomMargin, onClick));
        }

        return retval;
    }

    public ImageView getImage(Activity parent, String imageName, Integer width, Integer height, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, View.OnClickListener onClick) {
        ImageView retval = new ImageView(parent);

        Integer iconId = (Integer) parent.getResources().getIdentifier(imageName, "drawable", parent.getPackageName());
        retval.setImageResource(iconId);
        retval.setTag(imageName);

        FlowLayout.LayoutParams lp = new FlowLayout.LayoutParams(width, height);
        lp.setMargins(leftMargin, topMargin, rightMargin, bottomMargin);
        retval.setLayoutParams(lp);

        retval.setOnClickListener(onClick);

        return retval;
    }

    public Bitmap getAvatarMarker(Context context, Integer id, Bitmap avatar, Boolean isHirer) {
        String name = context.getResources().getResourceName(id);
        Drawable icon = AppCompatDrawableManager.get().getDrawable(context, id);
        //Drawable icon = context.getResources().getDrawable(id);
        Boolean isAvatar = (name.contains("ic_icon__marker"));

        final Integer maxWidth = 200;
        final Integer maxWidthAvatar = 200;

        Double multiplier = ((double)maxWidth / icon.getIntrinsicWidth());
        Integer height = (int)(icon.getMinimumHeight() * multiplier);

        Bitmap bitmap = createBitmap(maxWidth, height, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);

        int padding = (maxWidth - maxWidthAvatar) / 2;

        if (isAvatar && avatar != null) {
            Bitmap bitmapAvatar = Bitmap.createScaledBitmap(avatar, maxWidthAvatar, (int)(maxWidthAvatar * 1), true);
            bitmapAvatar = getRoundedShape(bitmapAvatar, bitmapAvatar.getWidth(), bitmapAvatar.getHeight());
            canvas.drawBitmap(bitmapAvatar, padding, padding, null);
        }

        icon.setBounds(padding, padding, canvas.getWidth(), canvas.getHeight());
        icon.draw(canvas);

        if (isHirer) {
            // TODO: Check this is the correct size depending on each zoom
            Integer diameter = (int)(200 * multiplier);
            Drawable hirerIcon = getDrawable(context, R.drawable.ic_ishirer);
            hirerIcon.setBounds(padding, canvas.getHeight() - diameter, padding + diameter, canvas.getHeight());
            hirerIcon.draw(canvas);
        }

        return Bitmap.createScaledBitmap(bitmap, maxWidth, height, true);
    }

    public int getDrawableId(Context context, String name) {
        return (Integer) context.getResources().getIdentifier(name, "drawable", context.getPackageName());
    }

    public Bitmap getDrawableImage(Context context, String name, int width, int height) {
        Integer id = (Integer) context.getResources().getIdentifier(name, "drawable", context.getPackageName());
        Drawable icon = getDrawable(context, id);

        Bitmap bitmap = createBitmap(width, height, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        icon.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        icon.draw(canvas);

        return bitmap;
    }

    private Drawable getDrawable(Context context, int id) {
        return AppCompatDrawableManager.get().getDrawable(context, id);
    }

    public Bitmap getDrawableImage(Context context, Integer id, int width, int height) {
        Drawable icon = getDrawable(context, id);

        Bitmap bitmap = createBitmap(width, height, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        icon.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        icon.draw(canvas);

        return bitmap;
    }

    public Bitmap getDrawableImage(Drawable image) {
        Bitmap bitmap = createBitmap(image.getMinimumWidth(), image.getMinimumHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        image.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        image.draw(canvas);

        return bitmap;
    }

    private Bitmap getRoundedShape(Bitmap bitmap, Integer width, Integer height) {
        Bitmap targetBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);

        Canvas canvas = new Canvas(targetBitmap);
        Path path = new Path();
        path.addCircle((float) width / 2, (float) height / 2, (Math.min(((float) width), ((float) height)) / 2), Path.Direction.CCW);

        canvas.clipPath(path);
        Bitmap sourceBitmap = bitmap;
        canvas.drawBitmap(sourceBitmap, new Rect(0, 0, sourceBitmap.getWidth(), sourceBitmap.getHeight()), new Rect(0, 0, width, height), null);
        return targetBitmap;
    }

    private Bitmap getContains(String name, boolean isPhoto, boolean isText, Bitmap bitmap) {
        if (!isText && !isPhoto) return bitmap;

        boolean isSymbol = name.startsWith("ic_symbol");
        boolean isService = name.startsWith("ic_symbol_service");

        int diameter = 100;
        int radius = 50;
        int margin = 20;

        if (isSymbol) {
            if (isService) {
                margin = -90;
            } else {
                margin = -20;
            }
        }

        int originalHeight = bitmap.getHeight();
        int newHeight = bitmap.getHeight() + diameter + margin;
        int width = bitmap.getWidth();

        Bitmap targetBitmap = Bitmap.createBitmap(width, newHeight, Bitmap.Config.ARGB_8888);

        Canvas canvas = new Canvas(targetBitmap);

        Paint p = new Paint();
        p.setStyle(Paint.Style.FILL_AND_STROKE);

        if (isPhoto) {
            p.setColor(Color.RED);
            canvas.drawCircle(0 + radius, (float) originalHeight + radius + margin, radius, p);
        }

        if (isText) {
            p.setColor(Color.BLUE);
            canvas.drawCircle(width - radius, (float) originalHeight + radius + margin, radius, p);
        }

        Bitmap sourceBitmap = bitmap;
        canvas.drawBitmap(sourceBitmap, new Rect(0, 0, sourceBitmap.getWidth(), sourceBitmap.getHeight()), new Rect(0, 0, width, originalHeight), null);
        return targetBitmap;
    }

    public Drawable getResizedPoi(String name, boolean isPhoto, boolean isText, Context context, byte[] marker, Integer zoomLevel) {
        Integer[] zoomLevelWidths =  new Integer[19];
        zoomLevelWidths[7] = 25;
        zoomLevelWidths[8] = 30;
        zoomLevelWidths[9] = 45;
        zoomLevelWidths[10] = 50;
        zoomLevelWidths[11] = 55;
        zoomLevelWidths[12] = 60;
        zoomLevelWidths[13] = 65;
        zoomLevelWidths[14] = 70;
        zoomLevelWidths[15] = 75;
        zoomLevelWidths[16] = 80;
        zoomLevelWidths[17] = 85;

        Library LIB = new Library();
        Bitmap markerBitmap = LIB.decodeBinary(marker);

        Integer width = zoomLevelWidths[zoomLevel];

        markerBitmap = getContains(name, isPhoto, isText, markerBitmap);

        Double multiplier = ((double)width / markerBitmap.getWidth());
        Integer height = (int)(markerBitmap.getHeight() * multiplier);

        Bitmap resized = Bitmap.createScaledBitmap(markerBitmap, width, height, false);

        Drawable iconResized = new BitmapDrawable(context.getResources(), resized);

        return iconResized;
    }

    public Drawable getResizedIcon(Context context, Integer id, Integer zoomLevel, byte[] avatarMarker, _Boat.enmStatus status, Integer direction, Boolean isAvatar, Boolean zeroAngleFixed) {
        Integer[] zoomLevelWidths =  new Integer[19];
        zoomLevelWidths[7] = 70;
        zoomLevelWidths[8] = 75;
        zoomLevelWidths[9] = 80;
        zoomLevelWidths[10] = 90;
        zoomLevelWidths[11] = 100;
        zoomLevelWidths[12] = 110;
        zoomLevelWidths[13] = 120;
        zoomLevelWidths[14] = 125;
        zoomLevelWidths[15] = 130;
        zoomLevelWidths[16] = 135;
        zoomLevelWidths[17] = 140;

        Library lib = new Library();
        Bitmap avatarMarkerBitmap = (avatarMarker != null ? lib.decodeBinary(avatarMarker) : getAvatarMarker(context, id, null, false));

        if (avatarMarker == null) {
            Global.getLIBDB().writeAvatarMarker(avatarMarkerBitmap);
        }

        Bitmap directionBitmap = getDrawableImage(context, R.drawable.ic_direction, 300, 300);
        Bitmap bitmap = createBitmap(directionBitmap.getWidth(), directionBitmap.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);

        if (status == _Boat.enmStatus.NotMoving) {
            Bitmap stoppedBitmap = getDrawableImage(context, R.drawable.ic_stopped, 300, 300);
            canvas.drawBitmap(stoppedBitmap, 0, 0, null);
        }

        Integer padding = (int)((directionBitmap.getWidth() - avatarMarkerBitmap.getWidth()) / 2);
        canvas.drawBitmap(avatarMarkerBitmap, padding, padding, null);

        if (!zeroAngleFixed) {
            canvas.rotate(direction, directionBitmap.getWidth() / 2, directionBitmap.getHeight() / 2);
            canvas.drawBitmap(directionBitmap, 0, 0, null);
        }

        Integer width = (isAvatar ? (int)(zoomLevelWidths[zoomLevel] * 1.5) : zoomLevelWidths[zoomLevel]);
        Double multiplier = ((double)width / directionBitmap.getWidth());
        Integer height = (int)(directionBitmap.getHeight() * multiplier);

        Bitmap resized = Bitmap.createScaledBitmap(bitmap, width, height, false);
        Drawable iconResized = new BitmapDrawable(context.getResources(), resized);

        return iconResized;
    }

    public BitmapDrawable getCircle(Context context, Integer circleWidth) {
        Bitmap bitmap = Bitmap.createBitmap(circleWidth, circleWidth, Bitmap.Config.ARGB_8888);
        Canvas circle = new Canvas(bitmap);
        Paint paint = new Paint();
        paint.setAntiAlias(true);
        paint.setStyle(Paint.Style.FILL);
        paint.setARGB(94, 224, 241, 125);
        circle.drawCircle(circleWidth / 2, circleWidth / 2, circleWidth, paint);
        circle.drawBitmap(bitmap, 0, 0, null);
        return new BitmapDrawable(context.getResources(), bitmap);
    }

    public Bitmap grabImage(Context context, Uri imageLocation)
    {
        context.getContentResolver().notifyChange(imageLocation, null);
        ContentResolver cr = context.getContentResolver();
        Bitmap bitmap = null;

        try
        {
            bitmap = android.provider.MediaStore.Images.Media.getBitmap(cr, imageLocation);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            Log.d(TAG, "Failed to load", e);
        }

        return bitmap;
    }

    public Bitmap getResizedBitmap(Bitmap bitmap, int maxSize) {
        int height = bitmap.getHeight();
        int width = bitmap.getWidth();

        double scale;
        int newHeight;
        int newWidth;

        if (height > width) {
            newHeight = maxSize;
            scale = (double)bitmap.getHeight() / (double)maxSize;
            newWidth = (int)(bitmap.getWidth() / scale);
        } else {
            newWidth = maxSize;
            scale = (double)bitmap.getWidth() / (double)maxSize;
            newHeight = (int)(bitmap.getHeight() / scale);
        }

        Log.d(TAG, "getResizedBitmap -" + scale + "-" + newWidth + "-" + width + "-" + newHeight + "-" + height);
        return getResizedBitmap(bitmap, newWidth, newHeight);
    }

    public Bitmap getResizedBitmap(Bitmap bitmap, int newWidth, int newHeight) {
        if (android.os.Build.VERSION.SDK_INT >= 24) {
            try {
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                bitmap.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);
                byte[] bitmapdata = bos.toByteArray();
                ByteArrayInputStream bs = new ByteArrayInputStream(bitmapdata);

                ExifInterface exif = new ExifInterface(bs);

                String orientString = exif.getAttribute(ExifInterface.TAG_ORIENTATION);
                int orientation = orientString != null ? Integer.parseInt(orientString) : ExifInterface.ORIENTATION_NORMAL;

                int rotationAngle = 0;
                if (orientation == ExifInterface.ORIENTATION_ROTATE_90) rotationAngle = 90;
                if (orientation == ExifInterface.ORIENTATION_ROTATE_180) rotationAngle = 180;
                if (orientation == ExifInterface.ORIENTATION_ROTATE_270) rotationAngle = 270;

                Matrix matrix = new Matrix();
                matrix.setRotate(rotationAngle, (float) bitmap.getWidth() / 2, (float) bitmap.getHeight() / 2);
                bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
            } catch (IOException e) {
                // Ignore do not check and correct orientation as exception occurred
            }
        }

        int width = bitmap.getWidth();
        int height = bitmap.getHeight();

        float scaleWidth = ((float) newWidth) / width;
        float scaleHeight = ((float) newHeight) / height;

        Matrix matrix = new Matrix();
        matrix.postScale(scaleWidth, scaleHeight);

        Log.d(TAG, "getResizedBitmap " + width + "-" + height + "-" + scaleWidth + "-" + scaleHeight + "-" + newWidth + "-" + newHeight);

        Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
        bitmap.recycle();

        return resizedBitmap;
    }

    public Bitmap rotateImage(Bitmap bitmap, float rotationAngle) {
        Matrix matrix = new Matrix();
        matrix.setRotate(rotationAngle, (float) bitmap.getWidth() / 2, (float) bitmap.getHeight() / 2);
        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
    }

//    public int getOrientationFromMediaStore(Context context, Uri imageUri) {
//        ContentResolver cr = context.getContentResolver();
//
//        String[] projection = {MediaStore.Images.ImageColumns.ORIENTATION};
//        Cursor cursor = android.provider.MediaStore.Images.Media.query(cr, imageUri, projection);
//
//        int orientation = -1;
//        if (cursor != null && cursor.moveToFirst()) {
//            orientation = cursor.getInt(0);
//            cursor.close();
//        }
//
//        Log.d(TAG, "Orientation " + orientation);
//
//        return orientation;
//    }
}
